/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* slowPtr=head;
        ListNode* fastPtr=head;
        if(head==NULL){
            return false;
        }
        while(fastPtr->next!=NULL && fastPtr->next->next!=NULL){
            if(fastPtr->next->next!=NULL){
                fastPtr=fastPtr->next->next;
            }
            else{
                fastPtr=fastPtr->next;
            }
            slowPtr=slowPtr->next;
            if(slowPtr==fastPtr){
                return true;
            }
        }
        return false;
    }
};
